# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python:
import os, sys

projectName = 'hooksoundmsg'

# smsdk_ext.cpp will be automatically added later
sourceFiles = [
  'extension.cpp',
]

###############
# Make sure to edit PackageScript, which copies your files to their appropriate locations
# Simple extensions do not need to modify past this point.

project = Extension.HL2Project(builder, projectName + '.ext')

if os.path.isfile(os.path.join(builder.currentSourcePath, 'sdk', 'smsdk_ext.cpp')):
  # Use the copy included in the project
  project.sources += [os.path.join('sdk', 'smsdk_ext.cpp')]
else:
  # Use the copy included with SM 1.6 and newer
  project.sources += [os.path.join(Extension.sm_root, 'public', 'smsdk_ext.cpp')]

project.sources += sourceFiles
  
for sdk_name in Extension.sdks:
  sdk = Extension.sdks[sdk_name]
  
  binary = Extension.HL2Config(project, projectName + '.ext.' + sdk.ext, sdk)
  binary.compiler.includes.append(os.path.join(sdk.path, 'common', 'protobuf-2.5.0', 'src'))

  netmessages_src_path = os.path.join(sdk.path, 'public', 'engine', 'protobuf', 'netmessages.pb.cc')
  binary.sources.append(netmessages_src_path)
  binary.sources += [
    os.path.join(Extension.sm_root, 'public', 'CDetour', 'detours.cpp'),
    os.path.join(Extension.sm_root, 'public', 'asm', 'asm.c'),
  ]

  binary.compiler.cxxincludes += [
    os.path.join(sdk.path, 'public', 'engine', 'protobuf'),
  ]

  if os.name == 'nt':
    protobuf_lib_path = os.path.join(sdk.path, 'lib', 'win32', 'release', 'vs2017', 'libprotobuf.lib')
  else:
    protobuf_lib_path = os.path.join(sdk.path, 'lib', 'linux32', 'release', 'libprotobuf.a')
  binary.compiler.postlink.append(protobuf_lib_path)
  
  if os.name == 'nt':
    binary.compiler.postlink.append('legacy_stdio_definitions.lib')
  
  binary.sources += [
    os.path.join(Extension.sm_root, 'public/libudis86/decode.c'),
    os.path.join(Extension.sm_root, 'public/libudis86/itab.c'),
    os.path.join(Extension.sm_root, 'public/libudis86/syn-att.c'),
    os.path.join(Extension.sm_root, 'public/libudis86/syn-intel.c'),
    os.path.join(Extension.sm_root, 'public/libudis86/syn.c'),
    os.path.join(Extension.sm_root, 'public/libudis86/udis86.c'),
  ]

Extension.extensions = builder.Add(project)
